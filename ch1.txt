Κεφάλαιο 1 - Επιλογή λύσης για monitoring συστήματος και εφαρμογής

**παράγραφος: Τι χρειαζόμαστε
*****************

Τα δύο βασικά εργαλεία που χρησιμοποιούνται κυρίως στην παραγωγή είναι το
Μunin και το Graphite. Θα εξετάσουμε ποιο είναι καταλληλότερο για την περίπτωσή
μας αναλύοντας το καθένα από αυτά ξεχωριστά.

Το Graphite περιληπτικά.

Είναι ένα εργαλείο για την παρακολούθηση της κατάστασης υπολογιστικών συστημάτων
παράγοντας γραφήματα, το οποίο προροσαρμόζεται εύκολα σε μεγάλης κλίμακας συστήματα
χωρίς να έχει μεγάλες απαιτήσεις σε πόρους.
Σχεδιάστηκε και ανταπτύχθηκε το 2006 από τον Chris Davis στην εταιρία Orbitz η οποία
δραστηριοποιείται στον τομέα κρατήσεων αεροπορικών εισιτήριων και ξενοδοχείων.
Ενώ ξεκίνησε σαν side project κατέληξε σαν ένα από τα βασικά εργαλεία 
παρακολουθησης συστημάτων. Το 2008 η εταιρεία επέτρεψε να εκδοθεί υπό την
άδεια ανοιχτού κώδικα Apache 2.0.

Το Graphite κάνει 2 συγκεκριμένα πράγματα: αποθηκεύει δεδομένα και παράγει
γραφήματα on demand πάνω στα δεδομένα που έχει. Αυτό το οποίο δεν κάνει είναι
η συλλογή των δεδομένων από τα nodes τα οποία είναι υπό παρακολούθηση. Την
δουλειά αυτή την αναλαμβάνουν κάποια άλλα εργαλεία για τα οποία θα μιλήσουμε
παρακάτω.

Graphite components
Τα επιμέρους στοιχεία του Graphite είναι: το Graphite-Webapp, το carbon και το
whisper.

Graphite-Web
Είναι ένα django web application το οποίο παράγει γραφήματα
χρησιμοποιώντας την βιβλιοθήκη Cairo η οποία παρέχει API για την
δημιουργία διανυσματικών γραφικών. Τα γραφήματα παράγονται
ζωντανά στο dashboard αμέσως μόλις το webapp έχει πρόσβαση στα
νέα δεδομένα. Το webapp παρέχει πολλούς τρόπους δημιουργίας και
παρουσίασης γραφημάτων καθώς και ένα URL API που καθιστά εύκολη
την ενσωμάτωση των γραφημάτων σε άλλα web sites. Από την
κοινώτητα παρέχεται επίσης μια πληθώρα dashboards που είναι
τροποποιημένα για τις διάφορες ανάγκες.

Carbon
Είναι ένα σύνολο απο daemons, γραμμένοι σε Τwisted framework της Python οι
οποίοι αναλαμβάνουν να περιμένουν για δεδομένα και να τα δέχονται πάνω από ένα 
σύνολο πρωτοκόλλων. Έπειτα τα αποθηκεύουν στον δίσκο χρησιμοποιώντας το τρίτο
στοιχείο του Graphite, το Whisper. Εκέι που διαφέρουν οι carbon-daemons είναι 
ο τρόπος που θα χειριστούν τα δεδομένα αφού τα παραλάβουν. Σε μια απλή
εγκατάσταση ο carbon-cache είναι αρκετός, ενώ μπορούν να χρησιμοποιηθούν
και οι υπόλλοιποι για πιο περίπλοκα συστήματα.

->carbon-cache
Δέχεται δεδομένα πάνω σε διάφορα πρωτόκολλα και τα γράφει στον δίσκο με τον πιο αποδοτικό τρόπο.
Αυτό απαιτεί προσωρινή αποθήκευση στην μνήμη RAM και αποθήκευση στον δίσκο σε τακτά χρονικά διαστήματα.
Σε περίπτωση που έχουμε αυξημένη ροή δεδομένων, ένα instance του carbon-cache πιθανόν να μην είναι αρκετό
για να χειριστεί το Ι/Ο. Για να προσαρμόσουμε το σύστημα μπορούμε να τρέξουμε πολλά instances του carbon-cache,
σε ένα ή περισσότερα μηχανήματα, πίσω από τους deamons carbon-relay και carbon-aggregator.

->carbon-relay
O daemon carbon-relay έχει 2 διακριτούς σκοπούς: το replication και το sharding.
Τοποθετείται ως proxy μεταξύ των εισερχόμενων μετρήσεων και των carbon-cache instances
και μοιράζει τα δεδομένα είτε στα instances του ίδιου μηχανήματος, είτε σε διαφορετικούς hosts.

->carbon-aggregator
Χρησιμοποιείται επίσης ως proxy μεταξύ μετρήσεων και του carbon-cache, σε περίπτωση που δεν χρειαζόμαστε 
μεγάλη λεπτομέρεια στα γραφήματα. Με μεθόδους όπως εξαγωγή μέσων όρων μπορεί να περιορίσει σημαντικά
το Ι/Ο και να μειώσει σε όγκο τα αρχεία του whisper.

Whisper
Είναι μία fixed-size βάση παρόμοια σε σχεδιασμό και σκοπό με το RRD το οποίο χρησιμοποιείται από το munin
και μας παρέχει έναν γρήγορο και αξιόπιστο τρόπο για την αποθήκευση των μετρήσεων-δεδομένων. Το Whisper επιτρέπει 
την μετατροπή της ανάλυσης των δεδομένων από υψηλή σε χαμηλή με σκοπό την διατήρηση δεδομένων ως ιστορικό ενώ παράλληλα 
δεν θα δεσμέυεται μεγάλος χώρος αποθήκευσης. Όσων αφορά γενικά την απόδοση του τρόπου αποθήκευσης το Whisper υστερεί σε
κάποια σημεία λόγω σχεδιαστικών επιλογών. Κάποιοι από αυτούς είναι:
Κάθε μέτρηση-σημείο αποθηκεύεται μαζί με ένα timestamp.
Κάποια αρχεία δεδομένων επικαλύπτουν χρονικές περιόδους.
Όλες οι χρονικές στιγμές-σημεία σε ένα αρχείο καταλαμβάνουν χώρο είτε περιέχουν μια μέτρηση είτε όχι.
Οι διαφορές με το σύστημα αποθήκευσης RRD είναι οι εξής:
->Το RRD δεν επιτρέπει ανανέωση δεδομένων για χρονικές στιγμές που υπάρχουν πριν
από αυτές που αποτελόυν την τελευταία ενημέρωση ενώ στο Whisper είναι εφικτό,
το οποίο κάνει την εισαγωγή ιστορικών δεδομένων στο Graphite εύκολη και απλή.
->To RRD σχεδιάστηκε χωρίς να ληφθεί υπόψιν η περίπτωση των μη τακτικών
ενημερώσεων. Σε αυτή την περίπτωση υπάρχει πιθανότητα να χάσει δεδομένα.
->Το Whisper απαιτεί η χρονική διαμεσολάβηση των μετρήσεων να είναι τόση, όση
και η καλύτερη "ανάλυση" των αρχείων που κρατάει, ώστε να μην χρειαστεί να
περάσουν από την διαδικασία του aggregation, όπως συμβαίνει με το RRD.

Αποδοτικότητα του Whisper
To Whisper είναι πιο αργό από το RRDtool, σαν συνέπεια του ότι είναι γραμμένο
σε Python ενώ το RRDtool είναι γραμμένο σε C. Βέβαια έχουν γίνει αρκετές
προσπάθειες βελτίωσης ώστε να πλησιάζει τους χρόνους του RRDtool και πλέον
ι διαφορά είναι ανεπαίσθητη και δεν παρουσιάζει κάποιο πρόβλημα.

Η δομή ενός αρχείου βάσης Whisper

WhisperFile Header,Data
                Header  Metadata,ArchiveInfo+
                        Metadata                aggregationType,maxRetention,xFilesFactor,archiveCount
                        ArchiveInfo             Offset,SecondsPerPoint,Points
                Data    Archive+
                        Archive                 Point+
                                                Point



Αποστολή μετρήσεων στο Graphite

Ένα μεγάλο πλεονέκτημα του Graphite είναι ότι δεν υπάρχει συγκεκριμένο εργαλείο για την αποστολή δεδομένων
αλλά προσφέρει κάποια πρωτόκολλα επικοινωνίας με τα οποία μπορεί ένα εργαλείο να επικοινωνήσει. Θα μπορόυσε κάποιος
να δημιουρήσει δικό του ή να διαλέξει μέσα από μια μεγάλη λίστα εργαλείων που υπάρχουν έτοιμα, σύμφωνα με τις ανάγκες του.
Τα εργαλεία που υπάρχουν χωρίζονται σε 3 κατηγορίες, σε αυτά που αποσκοπούν στην συλλογή των μετρήσεων από τον client, 
σε αυτά που έχουν σκοπό την αποστολή των δεδομένων που συλέχθηκαν, στον server και κάποια που σχετίζονται με την απεικόνιση
δεδομένων.
